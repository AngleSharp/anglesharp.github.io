"use strict";(self.webpackChunk_pidoc_core=self.webpackChunk_pidoc_core||[]).push([[859],{9859:(e,t,o)=>{o.r(t),o.d(t,{"default":()=>r});var n=o(7158),i=o(5292),a={title:"AngleSharp Scripting v0.5.0 released",date:"2016-10-03 11:45:00",categories:"news release scripting",author:"Florian Rappl",userId:"FlorianRappl",section:"Posts"};const r=function(){return n.createElement(i.ContentPage,null,n.createElement(i.PageLayout,{name:"blog",meta:a},n.createElement(i.PageContent,{meta:a},n.createElement(i.Markdown,{content:"\n<p>Just now the latest version of the JavaScript scripting extension <em>AngleSharp.Scripting.JavaScript</em> was released. In the new release with the version 0.5.0 a couple of bug fixes and improvements have been placed. All in all this is certainly leading the way forward.</p>\n<p>The biggest internal change is the placement of the correct prototype chain. This was on the list for quite some time. The change allows calling, e.g., <code>Object.getPrototypeOf(document)</code> with the result being the <code>HTMLDocument.prototype</code> element. Also objects such as <code>HTMLDocument</code> are now available on the <code>window</code> context. These objects are the constructor functions of their matching DOM interfaces. In most cases the constructors are just dummies, which cannot be used directly.</p>\n<p>A quite nice addition is the first API extension from the library. The <code>ExecuteScript</code> extension method works on document instances. It allows direct evaluation of a JavaScript snippet. The result is a .NET object, e.g., <code>document.ExecuteScript(&quot;2+3&quot;)</code> would result in a boxed <code>System.Double</code> instance (<code>5</code>). Similarly, a call to <code>document.ExecuteScript(&quot;document.querySelector('div')&quot;)</code> would return the instance of the first <code>div</code> element in the document.</p>\n<p>Finally, a couple of improvements to the type casting abilities have been integrated. Functions are now also accepted in form of strings (e.g., for <code>setTimeout</code> or <code>setInterval</code>). Furthermore, for primitive types (strings, booleans, ...) the corresponding JavaScript conversion is applied. This is all done as it should be.</p>\n<p>For the way forward we will improve the extensibility and standard complience of <em>AngleSharp.Scripting.JavaScript</em>. With the v0.6 release a set of nasty tests needs to be passed, which all work in standard browsers. The ultimate goal is to reach the v1 milestone shortly after the <em>AngleSharp.Core</em> library reaches it.</p>\n",link:"https://github.com/AngleSharp/anglesharp.github.io/tree/main/docs/blog/2016-10-03-anglesharp-scripting-v050-released.md",editLabel:"Edit on GitHub"}))))}}}]);
//# sourceMappingURL=6a769e.js.map