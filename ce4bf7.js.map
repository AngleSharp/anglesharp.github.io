{"version":3,"file":"ce4bf7.js","mappings":"gKAaUA,EAAO,CAAC,MAAQ,6BAA6B,KAAO,sBAAsB,WAAa,eAAe,OAAS,gBAAgB,OAAS,eAAe,QAAU,SAG3K,mBAAqB,OACnB,gBAAC,EAAAC,YAAW,KAEV,gBAAC,EAAAC,WAAU,CAACC,KAAM,OAAQH,KAAMA,GAC9B,gBAAC,EAAAI,YAAW,CAACJ,KAAMA,GACjB,gBAAC,EAAAK,SAAQ,CAACC,QAdD,++BAcgBC,KAfhB,gHAe4BC,UALxB","sources":["webpack://@pidoc/core/./src/tools/__generated__/blog-2015-10-12-anglesharp-v093-released.tsx"],"sourcesContent":["// {\"title\":\"AngleSharp v0.9.3 released\",\"date\":\"2015-10-12 11:44:00\",\"categories\":\"news release\",\"author\":\"Florian Rappl\",\"userId\":\"FlorianRappl\",\"section\":\"Posts\",\"link\":\"/blog/2015-10-12-anglesharp-v093-released\",\"source\":\"/home/runner/work/anglesharp.github.io/anglesharp.github.io/docs/blog/2015-10-12-anglesharp-v093-released.md\"}\nimport * as React from 'react';\nimport { ContentPage } from '@pidoc/components';\n\n    import { PageContent, Markdown, PageLayout } from '@pidoc/components';\n\n    const link = \"https://github.com/AngleSharp/anglesharp.github.io/tree/main/docs/blog/2015-10-12-anglesharp-v093-released.md\";\n    const html = `\n<p>AngleSharp v0.9.3 is another round of minor updates. Besides a few bug fixes the <code>CompareDocumentPosition</code> method has been improved. It now passes all tests and works reliably.</p>\n<p>The most interesting new feature is the ability to define custom handling of entities. This can be done via the <code>IEntityService</code>. The <code>GetSymbol</code> is usually called with an entity like <code>gt</code> for XML or <code>gt;</code> for HTML. The difference between XML and HTML lies in the way that HTML handles entity errors. HTML has the possibility to use non-semicolon-terminated entities.</p>\n<p>The simplest way would be to use, e.g., <code>XmlEntityService.Resolver</code>, in a custom implementation. That way the common entities would be resolved by the already available service.</p>\n<p>The next release will most probably be a feature release again. Hopefully features such as the CSSOM improvements, factory extensions, or a virtual file system, will be integrated.</p>\n`;\n    const meta = {\"title\":\"AngleSharp v0.9.3 released\",\"date\":\"2015-10-12 11:44:00\",\"categories\":\"news release\",\"author\":\"Florian Rappl\",\"userId\":\"FlorianRappl\",\"section\":\"Posts\"};\n  \n\nexport default () => (\n  <ContentPage>\n    \n    <PageLayout name={\"blog\"} meta={meta}>\n      <PageContent meta={meta}>\n        <Markdown content={html} link={link} editLabel={\"Edit on GitHub\"} />\n      </PageContent>\n    </PageLayout>\n  \n  </ContentPage>\n);"],"names":["meta","ContentPage","PageLayout","name","PageContent","Markdown","content","link","editLabel"],"sourceRoot":""}